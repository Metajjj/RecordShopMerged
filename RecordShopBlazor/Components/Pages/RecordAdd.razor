@page "/records/new"

<h3>@ComponentTitle</h3>

@rendermode InteractiveServer

@inject NavigationManager NVM;

@code {
    private String ComponentTitle { get; set; } = "RecordAdd";

    //Turn the inputs into a json.Desrialize<> { pi.name : pi.name.value } ?

    private String Title { get; set; }
    private String Artist { get; set; }
    private String Description { get; set; }
    private String Rdate { get; set; }

    private string Src { 
        get {
            return Regex.Match(Description+"", "https?:\\/\\/.*\\.\\w{3,4}").Value ?? "";
        }
    }

    private async void PostMe(){
        Console.WriteLine($"T:{Title}|A:{Artist}|D:{Description}|R:{Rdate}");
        //Validate here?!

        //Test c# injection ??

        if( !String.IsNullOrWhiteSpace(Rdate) && DateOnly.TryParseExact(Rdate,"d/M/yyyy", out var Date)  ){
            Console.WriteLine("valid date");

            //TODO run JS to update!
            ComponentTitle = "Successfully Added!";
            Task.Run(() =>
            {
                Thread.Sleep(1000 * 10);
                ComponentTitle = this.GetType().Name;
            });

            var a = new Albums { Title = Title, Description = Description, Artist = Artist, ReleaseDate = Date };
            var r = await new HttpClient { BaseAddress = Global.BackEnd }.PostAsJsonAsync("/Album", a);
            // Console.WriteLine(Regex.Match(r.Content.ReadAsStringAsync().Result.Trim(),"\\d+$").Value);

            NVM.NavigateTo($"records/{Regex.Match(r.Content.ReadAsStringAsync().Result.Trim(), "\\d+$").Value}");

        }else{
            Console.WriteLine("uh oh date");
            //Need valid date
            Rdate = "Enter a valid date!"; //Communicate back to client
        }
    }

}

<form style="max-width:80%">
    @* @foreach(var PI in new Albums().GetType().GetProperties()) *@
    @* { *@
    @*         //Static? Pattern validation? *@
    @*     <label for="@PI.Name">@PI.Name</label> *@
    @*     <input name="@PI.Name" pattern="" /> *@
    @*     <br /> *@
    @* } *@

    <label for="Title">Title</label> <br />                        <!--Title = hover-->
    <InputText name="Title" @bind-Value=Title DisplayName="Title" placeholder="title/name of song" title="What is the song known as?" />
    @* <input name="Title" @bind=Title placeholder="Title of Song" title="Song needs a name!"/> *@
        @* //Title = name *@
    <hr /> @* Auto matches parent width *@

    <label for="Artist">Artist</label> <br />
    @* <InputText name="Artist" @bind-Value=Artist DisplayName="Artist" placeholder="Artist of Song" title="Person(s) performing the song!" /> *@
    <input name="Artist" @bind=Artist placeholder="Artist of Song" title="Person(s) performing the song!"/>
    <hr />

    <label for="Description">Description</label> <br />
    @* <InputTextArea name="Description" @bind-Value=Description placeholder="Description of Song" title="Can include a image url!" /> *@
    <textarea name="Description" @bind=Description placeholder="Description of Song" title="Can include a image url!" />
    <hr />

    <label for="Rdate">Release Date</label> <br />
    @* <InputDate name="Rdate" @bind-Value=Rdate placeholder="DD/MM/YYYY" title="D/M/YY format!" /> *@
    <input name="Rdate" @bind=Rdate placeholder="DD/MM/YYYY" title="D/M/YY format!"/>
    <hr />

    <button type="button" @onclick="()=>PostMe()">Add new record!</button>

    <img src=@Src />
</form>